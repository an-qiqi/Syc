<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>U3D 基于NGUI写的 自适应大小的ListView</title>
    <url>/2021/10/20/%E6%88%91%E7%9A%84%E8%BD%A6%E8%BD%AE%E5%AD%90/%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8FListView/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System;</span><br><span class="line"></span><br><span class="line">public enum Layout</span><br><span class="line">&#123;</span><br><span class="line">    Vertical,</span><br><span class="line">    Horizontal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">///	无限Item列表</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class UIDiffSizeListView : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    public Layout 				layout;</span><br><span class="line">    public Vector2				spacing;</span><br><span class="line">    public GameObject           itemPrefab;</span><br><span class="line">    private Vector3				panelDefaultPos;</span><br><span class="line">    private UIItemRender        itemRender = null;</span><br><span class="line">    private UIPanel             mPanel;</span><br><span class="line">    private UIScrollView 		mScrollView;</span><br><span class="line">    private bool				initialized = false;</span><br><span class="line">    private GameObject		    content;</span><br><span class="line">    private Vector2			    scrollRectSize;</span><br><span class="line">    private int				    lastStartInex = 0;</span><br><span class="line">    public List&lt;object&gt;         lstData = new List&lt;object&gt;();</span><br><span class="line">    private List&lt;GameObject&gt;	lstItems = new List&lt;GameObject&gt;();</span><br><span class="line">    private Dictionary&lt;int,Vector2&gt; itemsPos = new Dictionary&lt;int,Vector2&gt;();</span><br><span class="line"></span><br><span class="line">    void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        this.Init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void Init()</span><br><span class="line">    &#123;   </span><br><span class="line"></span><br><span class="line">        if (initialized)</span><br><span class="line">            return;</span><br><span class="line">        initialized = true;</span><br><span class="line"></span><br><span class="line">        mPanel = NGUITools.FindInParents&lt;UIPanel&gt;(gameObject);</span><br><span class="line">        this.mScrollView = mPanel.GetComponent&lt;UIScrollView&gt;();</span><br><span class="line">        this.mPanel.onClipMove += OnUIPanelClipMove;</span><br><span class="line"></span><br><span class="line">        // panelDefaultPos</span><br><span class="line">        this.panelDefaultPos = mPanel.transform.localPosition;</span><br><span class="line"></span><br><span class="line">        // record some sizes</span><br><span class="line">        scrollRectSize = mPanel.GetViewSize();</span><br><span class="line"></span><br><span class="line">        // add a scrollrect content</span><br><span class="line">        GameObject go = new GameObject ();</span><br><span class="line">		go.name = &quot;content&quot;;</span><br><span class="line">        go.transform.SetParent(transform);</span><br><span class="line">        </span><br><span class="line">        UIWidget uiwidget = go.AddComponent&lt;UIWidget&gt;();</span><br><span class="line">        uiwidget.pivot = UIWidget.Pivot.TopLeft;</span><br><span class="line">        uiwidget.SetDimensions((int)scrollRectSize.x,(int)scrollRectSize.y);</span><br><span class="line">        go.transform.localPosition = Vector3.zero;</span><br><span class="line">        go.transform.localScale = Vector3.one;</span><br><span class="line">        this.content = go;</span><br><span class="line"></span><br><span class="line">        //itemPrefab</span><br><span class="line">        GameObject item = GameObject.Instantiate(itemPrefab) as GameObject;</span><br><span class="line">        item.transform.SetParent(mPanel.transform.parent);</span><br><span class="line">        item.transform.localPosition = new Vector3(1500, 1500, 1);</span><br><span class="line">        itemRender = item.GetComponent&lt;UIItemRender&gt;();</span><br><span class="line">        if (itemRender == null)</span><br><span class="line">            itemRender = item.AddComponent&lt;UIItemRender&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void AddData(object obj)</span><br><span class="line">    &#123;</span><br><span class="line">        this.lstData.Add(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void UpdateNow()</span><br><span class="line">    &#123;</span><br><span class="line">        this.Init();</span><br><span class="line">        RefreshListView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void OnUIPanelClipMove(UIPanel panel)</span><br><span class="line">    &#123;</span><br><span class="line">        int startIndex = GetStartIndex();</span><br><span class="line">        </span><br><span class="line">        if (startIndex != lastStartInex </span><br><span class="line">            &amp;&amp; startIndex &gt;= 0)</span><br><span class="line">        &#123;</span><br><span class="line">            RefreshListView();</span><br><span class="line">            lastStartInex = startIndex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Vector2 GetItemSize(int index)</span><br><span class="line">    &#123;   </span><br><span class="line">        if (!this.itemsPos.ContainsKey(index))</span><br><span class="line">        &#123;   </span><br><span class="line">            itemRender.SetData(lstData[index]);</span><br><span class="line">            Vector2 tempSize = NGUIMath.CalculateRelativeWidgetBounds(itemRender.transform).size;</span><br><span class="line">            this.itemsPos.Add(index,tempSize);</span><br><span class="line">        &#125;</span><br><span class="line">        return this.itemsPos[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Vector2 GetItemAnchorPos(int index)</span><br><span class="line">    &#123;</span><br><span class="line">        Vector2 basePos = Vector2.zero;</span><br><span class="line">        Vector2 offset = Vector2.zero;</span><br><span class="line"></span><br><span class="line">        Vector2 itemSize = GetItemSize(index);</span><br><span class="line">        </span><br><span class="line">        if (layout == Layout.Horizontal) </span><br><span class="line">        &#123;</span><br><span class="line">            for(int i=0; i &lt;= index; ++i)</span><br><span class="line">            &#123;   </span><br><span class="line">                Vector2 offsetSize = GetItemSize(i);</span><br><span class="line">                offset.x += offsetSize.x + spacing.x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        else </span><br><span class="line">        &#123;</span><br><span class="line">            basePos.y =  itemSize.y; //锚点左上</span><br><span class="line">            for(int i=0; i &lt;= index; ++i)</span><br><span class="line">            &#123;   </span><br><span class="line">                Vector2 offsetSize = GetItemSize(i);</span><br><span class="line">                offset.y -= offsetSize.y + spacing.y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return basePos + offset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int GetStartIndex()</span><br><span class="line">    &#123;</span><br><span class="line">        int index = -1;</span><br><span class="line">        float sum = 0;</span><br><span class="line"></span><br><span class="line">        Vector3 pos = mPanel.transform.localPosition - this.panelDefaultPos;</span><br><span class="line">        </span><br><span class="line">        switch (layout)</span><br><span class="line">        &#123;</span><br><span class="line">        case Layout.Horizontal:</span><br><span class="line">            sum = -spacing.x;</span><br><span class="line">            for(int i=0; i &lt; lstData.Count; ++i)</span><br><span class="line">            &#123;   </span><br><span class="line">                Vector2 itemSize = GetItemSize(i);</span><br><span class="line">                sum += (itemSize.x + spacing.x);</span><br><span class="line">                if(sum &lt;= pos.x)</span><br><span class="line">                &#123;</span><br><span class="line">                    index = i;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        case Layout.Vertical:</span><br><span class="line">            sum = spacing.y;</span><br><span class="line">            for(int i=0; i&lt;lstData.Count; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                Vector2 itemSize = GetItemSize(i);</span><br><span class="line">                sum += (itemSize.y + spacing.y);</span><br><span class="line">                </span><br><span class="line">                if(sum &lt;= pos.y)</span><br><span class="line">                &#123;</span><br><span class="line">                    index = i;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        ++index;</span><br><span class="line">        if (index &lt; 0)	index = 0;</span><br><span class="line">        if (index &gt;= lstData.Count) index = 0;</span><br><span class="line"></span><br><span class="line">        return index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int GetMaxShowItemNum()</span><br><span class="line">    &#123;</span><br><span class="line">        int max = 0;</span><br><span class="line">        int index = GetStartIndex();</span><br><span class="line">        float sum = 0;</span><br><span class="line">        switch (layout) </span><br><span class="line">        &#123;</span><br><span class="line">        case Layout.Horizontal:</span><br><span class="line">            while(index &lt; lstData.Count &amp;&amp; sum &lt; scrollRectSize.x)</span><br><span class="line">            &#123;   </span><br><span class="line">                Vector2 itemSize = GetItemSize(index);</span><br><span class="line">                sum += (itemSize.x + spacing.x);</span><br><span class="line">                index++;</span><br><span class="line">                max++;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        case Layout.Vertical:</span><br><span class="line">            while(index &lt; lstData.Count &amp;&amp; sum &lt; scrollRectSize.y)</span><br><span class="line">            &#123;   </span><br><span class="line">                Vector2 itemSize = GetItemSize(index);</span><br><span class="line">                sum += (itemSize.y + spacing.y);</span><br><span class="line">                index++;</span><br><span class="line">                max++;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        return max + 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取当前显示的数量</span><br><span class="line">    private int GetCurrentShowItemNum()</span><br><span class="line">    &#123;</span><br><span class="line">        int startIndex = GetStartIndex();</span><br><span class="line">        int maxShowNum = GetMaxShowItemNum();</span><br><span class="line">        int maxItemNum = lstData.Count - startIndex;</span><br><span class="line">        return maxShowNum &lt; maxItemNum ? maxShowNum : maxItemNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取item</span><br><span class="line">    public  GameObject GetItemGameObject(int index)</span><br><span class="line">    &#123;</span><br><span class="line">        if(index &lt; lstItems.Count)</span><br><span class="line">        &#123;</span><br><span class="line">            GameObject go = lstItems[index];</span><br><span class="line">            if(false == go.activeSelf)</span><br><span class="line">            &#123;</span><br><span class="line">                go.SetActive(true);</span><br><span class="line">            &#125;</span><br><span class="line">            return lstItems[index];</span><br><span class="line">        &#125;</span><br><span class="line">        else </span><br><span class="line">        &#123;</span><br><span class="line">            GameObject go = GameObject.Instantiate(itemPrefab) as GameObject;</span><br><span class="line">            lstItems.Add(go);</span><br><span class="line">            return go;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public virtual int GetDataCount()</span><br><span class="line">    &#123;</span><br><span class="line">        if (null == lstData)return 1;</span><br><span class="line">        else return lstData.Count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void HideNonuseableItems()</span><br><span class="line">    &#123;   </span><br><span class="line">        for (int i = 0; i &lt; lstItems.Count; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            if(lstItems[i].activeSelf)</span><br><span class="line">            &#123;</span><br><span class="line">                lstItems[i].SetActive(false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void RefreshListView()</span><br><span class="line">    &#123;</span><br><span class="line">        // set the item postion and data</span><br><span class="line">        int startIndex = GetStartIndex();</span><br><span class="line">        if (startIndex &lt; 0)	startIndex = 0;</span><br><span class="line">        </span><br><span class="line">        // 不要显示之前显示的额外项目</span><br><span class="line">        HideNonuseableItems();</span><br><span class="line"></span><br><span class="line">        int currentShowItemNum = GetCurrentShowItemNum();</span><br><span class="line">        for (int i=0; i &lt; currentShowItemNum; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            GameObject go = GetItemGameObject(i);</span><br><span class="line">            var trans = go.transform;</span><br><span class="line">            trans.SetParent(this.content.transform);</span><br><span class="line">            </span><br><span class="line">            UIItemRender itemRender = go.GetComponent&lt;UIItemRender&gt;();</span><br><span class="line">            itemRender.SetData(lstData[startIndex + i]);</span><br><span class="line">            // 更新大小</span><br><span class="line">            Vector2 tempSize = NGUIMath.CalculateRelativeWidgetBounds(go.transform).size;</span><br><span class="line">            itemsPos[startIndex + i] = tempSize;</span><br><span class="line">            // 设置位置</span><br><span class="line">            trans.localPosition = GetItemAnchorPos(startIndex + i);</span><br><span class="line">            trans.localScale = Vector3.one;</span><br><span class="line"></span><br><span class="line">            go.SetActive(true);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 设置进度</span><br><span class="line">        int dataCount = GetDataCount();</span><br><span class="line">        dataCount -= (GetMaxShowItemNum()-2);</span><br><span class="line">        if (dataCount &lt; 1) dataCount = 1;</span><br><span class="line">        float progress = (startIndex + 1)/(float)dataCount;</span><br><span class="line">        progress = Mathf.Clamp01(progress);</span><br><span class="line">        //OnProgress(progress);</span><br><span class="line"></span><br><span class="line">        if (progress &gt;= 1)</span><br><span class="line">            this.mScrollView.Press(false);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>造轮子</category>
      </categories>
      <tags>
        <tag>U3D</tag>
        <tag>轮子</tag>
      </tags>
  </entry>
  <entry>
    <title>模板</title>
    <url>/2021/10/19/test/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>U3D</tag>
      </tags>
  </entry>
</search>
